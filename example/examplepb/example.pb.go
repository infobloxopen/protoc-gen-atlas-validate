// Code generated by protoc-gen-go. DO NOT EDIT.
// source: example/examplepb/example.proto

/*
Package examplepb is a generated protocol buffer package.

It is generated from these files:
	example/examplepb/example.proto

It has these top-level messages:
	User
	Address
	Group
	CreateUserRequest
	UpdateUserRequest
	EmptyRequest
	EmptyResponse
	Profile
	UpdateProfileRequest
*/
package examplepb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/infobloxopen/protoc-gen-atlas-validate/options"
import external "github.com/infobloxopen/protoc-gen-atlas-validate/example/external"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type User struct {
	Id           int32                  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name         string                 `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Profile      *Profile               `protobuf:"bytes,3,opt,name=profile" json:"profile,omitempty"`
	Address      *Address               `protobuf:"bytes,4,opt,name=address" json:"address,omitempty"`
	Groups       []*Group               `protobuf:"bytes,5,rep,name=groups" json:"groups,omitempty"`
	Parents      []*User_Parent         `protobuf:"bytes,6,rep,name=parents" json:"parents,omitempty"`
	ExternalUser *external.ExternalUser `protobuf:"bytes,7,opt,name=external_user,json=externalUser" json:"external_user,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *User) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *User) GetProfile() *Profile {
	if m != nil {
		return m.Profile
	}
	return nil
}

func (m *User) GetAddress() *Address {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *User) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *User) GetParents() []*User_Parent {
	if m != nil {
		return m.Parents
	}
	return nil
}

func (m *User) GetExternalUser() *external.ExternalUser {
	if m != nil {
		return m.ExternalUser
	}
	return nil
}

type User_Parent struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *User_Parent) Reset()                    { *m = User_Parent{} }
func (m *User_Parent) String() string            { return proto.CompactTextString(m) }
func (*User_Parent) ProtoMessage()               {}
func (*User_Parent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

func (m *User_Parent) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Address struct {
	Country string            `protobuf:"bytes,1,opt,name=country" json:"country,omitempty"`
	State   string            `protobuf:"bytes,2,opt,name=state" json:"state,omitempty"`
	City    string            `protobuf:"bytes,3,opt,name=city" json:"city,omitempty"`
	Zip     string            `protobuf:"bytes,4,opt,name=zip" json:"zip,omitempty"`
	Tags    map[string]string `protobuf:"bytes,10,rep,name=tags" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Address) Reset()                    { *m = Address{} }
func (m *Address) String() string            { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()               {}
func (*Address) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Address) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *Address) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *Address) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *Address) GetZip() string {
	if m != nil {
		return m.Zip
	}
	return ""
}

func (m *Address) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type Group struct {
	Id    int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Notes string `protobuf:"bytes,3,opt,name=notes" json:"notes,omitempty"`
}

func (m *Group) Reset()                    { *m = Group{} }
func (m *Group) String() string            { return proto.CompactTextString(m) }
func (*Group) ProtoMessage()               {}
func (*Group) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Group) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Group) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Group) GetNotes() string {
	if m != nil {
		return m.Notes
	}
	return ""
}

type CreateUserRequest struct {
	Payload *User `protobuf:"bytes,1,opt,name=payload" json:"payload,omitempty"`
}

func (m *CreateUserRequest) Reset()                    { *m = CreateUserRequest{} }
func (m *CreateUserRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateUserRequest) ProtoMessage()               {}
func (*CreateUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CreateUserRequest) GetPayload() *User {
	if m != nil {
		return m.Payload
	}
	return nil
}

type UpdateUserRequest struct {
	Payload *User `protobuf:"bytes,1,opt,name=payload" json:"payload,omitempty"`
}

func (m *UpdateUserRequest) Reset()                    { *m = UpdateUserRequest{} }
func (m *UpdateUserRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateUserRequest) ProtoMessage()               {}
func (*UpdateUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *UpdateUserRequest) GetPayload() *User {
	if m != nil {
		return m.Payload
	}
	return nil
}

type EmptyRequest struct {
}

func (m *EmptyRequest) Reset()                    { *m = EmptyRequest{} }
func (m *EmptyRequest) String() string            { return proto.CompactTextString(m) }
func (*EmptyRequest) ProtoMessage()               {}
func (*EmptyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type EmptyResponse struct {
}

func (m *EmptyResponse) Reset()                    { *m = EmptyResponse{} }
func (m *EmptyResponse) String() string            { return proto.CompactTextString(m) }
func (*EmptyResponse) ProtoMessage()               {}
func (*EmptyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type Profile struct {
	Id    int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Notes string `protobuf:"bytes,3,opt,name=notes" json:"notes,omitempty"`
}

func (m *Profile) Reset()                    { *m = Profile{} }
func (m *Profile) String() string            { return proto.CompactTextString(m) }
func (*Profile) ProtoMessage()               {}
func (*Profile) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Profile) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Profile) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Profile) GetNotes() string {
	if m != nil {
		return m.Notes
	}
	return ""
}

type UpdateProfileRequest struct {
	Payload *Profile `protobuf:"bytes,1,opt,name=payload" json:"payload,omitempty"`
}

func (m *UpdateProfileRequest) Reset()                    { *m = UpdateProfileRequest{} }
func (m *UpdateProfileRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateProfileRequest) ProtoMessage()               {}
func (*UpdateProfileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *UpdateProfileRequest) GetPayload() *Profile {
	if m != nil {
		return m.Payload
	}
	return nil
}

func init() {
	proto.RegisterType((*User)(nil), "example.User")
	proto.RegisterType((*User_Parent)(nil), "example.User.Parent")
	proto.RegisterType((*Address)(nil), "example.Address")
	proto.RegisterType((*Group)(nil), "example.Group")
	proto.RegisterType((*CreateUserRequest)(nil), "example.CreateUserRequest")
	proto.RegisterType((*UpdateUserRequest)(nil), "example.UpdateUserRequest")
	proto.RegisterType((*EmptyRequest)(nil), "example.EmptyRequest")
	proto.RegisterType((*EmptyResponse)(nil), "example.EmptyResponse")
	proto.RegisterType((*Profile)(nil), "example.Profile")
	proto.RegisterType((*UpdateProfileRequest)(nil), "example.UpdateProfileRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Users service

type UsersClient interface {
	Create(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	Update(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	List(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	UpdateExternalUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*EmptyResponse, error)
	UpdateExternalUser2(ctx context.Context, in *external.ExternalUser, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type usersClient struct {
	cc *grpc.ClientConn
}

func NewUsersClient(cc *grpc.ClientConn) UsersClient {
	return &usersClient{cc}
}

func (c *usersClient) Create(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := grpc.Invoke(ctx, "/example.Users/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) Update(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := grpc.Invoke(ctx, "/example.Users/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) List(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := grpc.Invoke(ctx, "/example.Users/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) UpdateExternalUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := grpc.Invoke(ctx, "/example.Users/UpdateExternalUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) UpdateExternalUser2(ctx context.Context, in *external.ExternalUser, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := grpc.Invoke(ctx, "/example.Users/UpdateExternalUser2", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Users service

type UsersServer interface {
	Create(context.Context, *CreateUserRequest) (*EmptyResponse, error)
	Update(context.Context, *UpdateUserRequest) (*EmptyResponse, error)
	List(context.Context, *EmptyRequest) (*EmptyResponse, error)
	UpdateExternalUser(context.Context, *User) (*EmptyResponse, error)
	UpdateExternalUser2(context.Context, *external.ExternalUser) (*EmptyResponse, error)
}

func RegisterUsersServer(s *grpc.Server, srv UsersServer) {
	s.RegisterService(&_Users_serviceDesc, srv)
}

func _Users_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.Users/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).Create(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.Users/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).Update(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.Users/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).List(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_UpdateExternalUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).UpdateExternalUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.Users/UpdateExternalUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).UpdateExternalUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_UpdateExternalUser2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(external.ExternalUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).UpdateExternalUser2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.Users/UpdateExternalUser2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).UpdateExternalUser2(ctx, req.(*external.ExternalUser))
	}
	return interceptor(ctx, in, info, handler)
}

var _Users_serviceDesc = grpc.ServiceDesc{
	ServiceName: "example.Users",
	HandlerType: (*UsersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Users_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Users_Update_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Users_List_Handler,
		},
		{
			MethodName: "UpdateExternalUser",
			Handler:    _Users_UpdateExternalUser_Handler,
		},
		{
			MethodName: "UpdateExternalUser2",
			Handler:    _Users_UpdateExternalUser2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "example/examplepb/example.proto",
}

// Client API for Profiles service

type ProfilesClient interface {
	Create(ctx context.Context, in *Profile, opts ...grpc.CallOption) (*EmptyResponse, error)
	Update(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type profilesClient struct {
	cc *grpc.ClientConn
}

func NewProfilesClient(cc *grpc.ClientConn) ProfilesClient {
	return &profilesClient{cc}
}

func (c *profilesClient) Create(ctx context.Context, in *Profile, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := grpc.Invoke(ctx, "/example.Profiles/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profilesClient) Update(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := grpc.Invoke(ctx, "/example.Profiles/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Profiles service

type ProfilesServer interface {
	Create(context.Context, *Profile) (*EmptyResponse, error)
	Update(context.Context, *UpdateProfileRequest) (*EmptyResponse, error)
}

func RegisterProfilesServer(s *grpc.Server, srv ProfilesServer) {
	s.RegisterService(&_Profiles_serviceDesc, srv)
}

func _Profiles_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Profile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilesServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.Profiles/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilesServer).Create(ctx, req.(*Profile))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profiles_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilesServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.Profiles/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilesServer).Update(ctx, req.(*UpdateProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Profiles_serviceDesc = grpc.ServiceDesc{
	ServiceName: "example.Profiles",
	HandlerType: (*ProfilesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Profiles_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Profiles_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "example/examplepb/example.proto",
}

// Client API for Groups service

type GroupsClient interface {
	Create(ctx context.Context, in *Group, opts ...grpc.CallOption) (*EmptyResponse, error)
	Update(ctx context.Context, in *Group, opts ...grpc.CallOption) (*EmptyResponse, error)
	ValidatedList(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type groupsClient struct {
	cc *grpc.ClientConn
}

func NewGroupsClient(cc *grpc.ClientConn) GroupsClient {
	return &groupsClient{cc}
}

func (c *groupsClient) Create(ctx context.Context, in *Group, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := grpc.Invoke(ctx, "/example.Groups/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) Update(ctx context.Context, in *Group, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := grpc.Invoke(ctx, "/example.Groups/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) ValidatedList(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := grpc.Invoke(ctx, "/example.Groups/ValidatedList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Groups service

type GroupsServer interface {
	Create(context.Context, *Group) (*EmptyResponse, error)
	Update(context.Context, *Group) (*EmptyResponse, error)
	ValidatedList(context.Context, *EmptyRequest) (*EmptyResponse, error)
}

func RegisterGroupsServer(s *grpc.Server, srv GroupsServer) {
	s.RegisterService(&_Groups_serviceDesc, srv)
}

func _Groups_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.Groups/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).Create(ctx, req.(*Group))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.Groups/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).Update(ctx, req.(*Group))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_ValidatedList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).ValidatedList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.Groups/ValidatedList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).ValidatedList(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Groups_serviceDesc = grpc.ServiceDesc{
	ServiceName: "example.Groups",
	HandlerType: (*GroupsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Groups_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Groups_Update_Handler,
		},
		{
			MethodName: "ValidatedList",
			Handler:    _Groups_ValidatedList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "example/examplepb/example.proto",
}

func init() { proto.RegisterFile("example/examplepb/example.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 882 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0xcd, 0x6f, 0xe3, 0x44,
	0x14, 0xaf, 0xdd, 0xc4, 0x69, 0x5e, 0x9b, 0x7e, 0xbc, 0x0d, 0xc1, 0x6b, 0xba, 0x90, 0xb5, 0xd0,
	0x52, 0x45, 0xaa, 0x2d, 0x99, 0x03, 0x28, 0x0b, 0x07, 0xba, 0x54, 0x0b, 0xe2, 0x43, 0xbb, 0x16,
	0x45, 0xa8, 0x97, 0x6a, 0x1a, 0xcf, 0xa6, 0x16, 0xae, 0xc7, 0x78, 0x26, 0xab, 0x2d, 0x2b, 0x0e,
	0x70, 0xe1, 0xc0, 0x91, 0x3f, 0x68, 0x2f, 0x48, 0xdc, 0xe1, 0xb6, 0x67, 0xfe, 0x10, 0x34, 0x1f,
	0x76, 0xeb, 0xa4, 0x59, 0xa0, 0x9c, 0xf2, 0xe6, 0xbd, 0x37, 0xbf, 0xf7, 0x7e, 0x3f, 0xbf, 0x99,
	0x09, 0xbc, 0x45, 0x9f, 0x91, 0xf3, 0x22, 0xa3, 0xa1, 0xf9, 0x2d, 0x4e, 0x2b, 0x2b, 0x28, 0x4a,
	0x26, 0x18, 0x76, 0xcc, 0xd2, 0xdb, 0x9d, 0x32, 0x36, 0xcd, 0x68, 0x48, 0x8a, 0x34, 0x24, 0x79,
	0xce, 0x04, 0x11, 0x29, 0xcb, 0xb9, 0x4e, 0xf3, 0xbe, 0x9c, 0xa6, 0xe2, 0x6c, 0x76, 0x1a, 0x4c,
	0xd8, 0x79, 0x98, 0xe6, 0x4f, 0xd8, 0x69, 0xc6, 0x9e, 0xb1, 0x82, 0xe6, 0xa1, 0x0a, 0x4f, 0xf6,
	0xa7, 0x34, 0xdf, 0x27, 0x22, 0x23, 0x7c, 0xff, 0x29, 0xc9, 0xd2, 0x84, 0x08, 0x1a, 0xb2, 0x42,
	0x01, 0x84, 0xca, 0x7d, 0x52, 0xb9, 0x0d, 0xde, 0xe3, 0xff, 0x8e, 0x77, 0xc9, 0x44, 0xd0, 0x32,
	0x27, 0x59, 0x6d, 0x68, 0x48, 0xff, 0x77, 0x1b, 0x5a, 0x47, 0x9c, 0x96, 0x38, 0x00, 0x3b, 0x4d,
	0x5c, 0x6b, 0x68, 0xed, 0xb5, 0x0f, 0x9c, 0x97, 0x2f, 0x6e, 0xdb, 0x6b, 0x2b, 0xb1, 0x9d, 0x26,
	0xb8, 0x0b, 0xad, 0x9c, 0x9c, 0x53, 0xd7, 0x1e, 0x5a, 0x7b, 0xdd, 0x83, 0xb5, 0x97, 0x2f, 0x6e,
	0xb7, 0xd0, 0x5e, 0xb1, 0x62, 0xe5, 0xc5, 0x11, 0x74, 0x8a, 0x92, 0x3d, 0x49, 0x33, 0xea, 0xae,
	0x0e, 0xad, 0xbd, 0xf5, 0x68, 0x3b, 0xa8, 0x94, 0x7a, 0xa4, 0xfd, 0x71, 0x95, 0x20, 0x73, 0x49,
	0x92, 0x94, 0x94, 0x73, 0xb7, 0x35, 0x97, 0xfb, 0x91, 0xf6, 0xc7, 0x55, 0x02, 0xde, 0x03, 0x67,
	0x5a, 0xb2, 0x59, 0xc1, 0xdd, 0xf6, 0x70, 0x75, 0x6f, 0x3d, 0xda, 0xac, 0x53, 0x1f, 0x4a, 0x77,
	0x6c, 0xa2, 0x18, 0x40, 0xa7, 0x20, 0x25, 0xcd, 0x05, 0x77, 0x1d, 0x95, 0xd8, 0xaf, 0x13, 0x25,
	0xab, 0xe0, 0x91, 0x0a, 0xc6, 0x55, 0x12, 0xde, 0x87, 0x5e, 0x25, 0xc0, 0xc9, 0x8c, 0xd3, 0xd2,
	0xed, 0xa8, 0x4e, 0x06, 0x41, 0x2d, 0xcb, 0xa1, 0x31, 0xe4, 0xf6, 0x78, 0x83, 0x5e, 0x59, 0x79,
	0xbb, 0xe0, 0x68, 0x3c, 0x44, 0x23, 0x8a, 0x94, 0xab, 0xab, 0xa5, 0xf0, 0xff, 0xb0, 0xa0, 0x63,
	0x78, 0xa0, 0x0b, 0x9d, 0x09, 0x9b, 0xe5, 0xa2, 0xbc, 0x30, 0x29, 0xd5, 0x12, 0xdf, 0x84, 0x36,
	0x17, 0x44, 0x34, 0xf4, 0x04, 0xdb, 0x5a, 0x89, 0xb5, 0x5b, 0x22, 0x4f, 0x52, 0x71, 0xa1, 0xd4,
	0xec, 0xc6, 0xca, 0xc6, 0x6d, 0x58, 0xfd, 0x3e, 0x2d, 0x94, 0x68, 0xdd, 0x58, 0x9a, 0x18, 0x40,
	0x4b, 0x90, 0x29, 0x77, 0x41, 0x71, 0xf6, 0xe6, 0x75, 0x0c, 0xbe, 0x22, 0x53, 0x7e, 0x28, 0xeb,
	0xc5, 0x2a, 0xcf, 0x7b, 0x0f, 0xba, 0xb5, 0x4b, 0xc2, 0x7d, 0x4b, 0xab, 0xc6, 0xa4, 0x89, 0x7d,
	0x68, 0x3f, 0x25, 0xd9, 0xcc, 0x34, 0x15, 0xeb, 0xc5, 0xd8, 0x7e, 0xdf, 0xf2, 0x1f, 0x43, 0x5b,
	0x09, 0xbe, 0x38, 0x1e, 0xdb, 0x96, 0x1a, 0x0f, 0xaf, 0x31, 0x1e, 0x3a, 0xb2, 0x62, 0x86, 0xa3,
	0x0f, 0xed, 0x9c, 0x09, 0xca, 0x0d, 0x19, 0xbd, 0xf0, 0x3f, 0x80, 0x9d, 0x07, 0x25, 0x25, 0x82,
	0x2a, 0x85, 0xe9, 0x77, 0x33, 0xca, 0x05, 0xbe, 0x23, 0xbf, 0xe3, 0x45, 0xc6, 0x88, 0xae, 0xb1,
	0x1e, 0xf5, 0x1a, 0xdf, 0x31, 0xae, 0xa2, 0x72, 0xf7, 0x51, 0x91, 0xdc, 0x74, 0xf7, 0x26, 0x6c,
	0x1c, 0x9e, 0x17, 0xe2, 0xc2, 0x6c, 0xf4, 0xb7, 0xa0, 0x67, 0xd6, 0xbc, 0x60, 0x39, 0xa7, 0xfe,
	0x67, 0xd0, 0x31, 0x73, 0x8b, 0x9b, 0x97, 0x8c, 0x97, 0x31, 0x5d, 0xb3, 0x5e, 0xc9, 0xf4, 0x00,
	0xfa, 0xba, 0xd7, 0xea, 0x28, 0x98, 0x76, 0x47, 0xf3, 0xed, 0x5e, 0x77, 0x68, 0x74, 0x42, 0xf4,
	0x4b, 0x0b, 0xda, 0x92, 0x03, 0xc7, 0x23, 0x70, 0xb4, 0x6e, 0x78, 0xf9, 0xbd, 0x17, 0x84, 0xf4,
	0x06, 0x75, 0xac, 0x49, 0xec, 0xf5, 0x9f, 0xfe, 0xfc, 0xeb, 0x57, 0x7b, 0xc7, 0x77, 0x42, 0x39,
	0xf6, 0x7c, 0x5c, 0x15, 0xc0, 0x1f, 0x2d, 0x70, 0x74, 0x97, 0x57, 0x70, 0x17, 0x24, 0x5e, 0x8a,
	0xfb, 0x40, 0xe1, 0x7e, 0xe8, 0xdd, 0xd2, 0xb8, 0xe1, 0x73, 0x83, 0x1b, 0xa4, 0xc9, 0x0f, 0x75,
	0x91, 0xe3, 0x3b, 0x11, 0xaa, 0xf8, 0xf5, 0x61, 0xfc, 0x06, 0x5a, 0x9f, 0xa7, 0x5c, 0xe0, 0x6b,
	0xf3, 0x45, 0x5e, 0x5d, 0xfb, 0xae, 0xaa, 0xfd, 0x06, 0x1a, 0x4e, 0xc7, 0x3b, 0xb8, 0x15, 0x92,
	0x5c, 0x30, 0x71, 0x46, 0x4b, 0x75, 0xba, 0x39, 0x4e, 0x00, 0x35, 0x97, 0xab, 0xc7, 0x1a, 0x9b,
	0xe3, 0xb1, 0x14, 0xff, 0x9e, 0xc2, 0x1f, 0x7a, 0x5b, 0x61, 0xe3, 0xce, 0xe0, 0xe3, 0xe6, 0x1d,
	0x82, 0x67, 0x70, 0x6b, 0xb1, 0x48, 0x84, 0x4b, 0x2e, 0x95, 0x7f, 0xa2, 0xe3, 0x0d, 0xe6, 0xca,
	0x9d, 0xcc, 0x14, 0xf8, 0xd8, 0x1a, 0x45, 0xbf, 0x59, 0xb0, 0x66, 0x46, 0x84, 0xe3, 0x27, 0xf5,
	0x40, 0x2c, 0xcc, 0xcf, 0xd2, 0x1a, 0x7d, 0x55, 0x63, 0xd3, 0xef, 0x86, 0xe6, 0x56, 0xe6, 0x63,
	0x6b, 0x84, 0x79, 0x3d, 0x02, 0x77, 0xe6, 0x46, 0xa0, 0x39, 0xb9, 0x4b, 0x61, 0xf7, 0xf5, 0x69,
	0x50, 0xe0, 0x77, 0xbd, 0x41, 0x0d, 0x7e, 0xfd, 0xf7, 0x8e, 0x7e, 0xb6, 0xc1, 0x79, 0xa8, 0x2f,
	0xf0, 0x8f, 0x6b, 0x12, 0x73, 0x57, 0xfc, 0xd2, 0x5a, 0xa8, 0xaa, 0x6c, 0xf8, 0x9d, 0x50, 0xbf,
	0x01, 0x92, 0xc0, 0xa7, 0x35, 0x81, 0x7f, 0x8b, 0x62, 0xce, 0x83, 0xb7, 0x61, 0x50, 0xc2, 0xe7,
	0xb2, 0x43, 0x6b, 0x84, 0x09, 0xf4, 0xbe, 0x36, 0x8f, 0x67, 0x72, 0x93, 0xa1, 0x7c, 0x5b, 0xbf,
	0x9d, 0x0a, 0xde, 0xc5, 0xaa, 0xc9, 0xe3, 0x1e, 0xae, 0x1b, 0xf3, 0x84, 0x24, 0x89, 0x67, 0xae,
	0x8f, 0x83, 0x23, 0x9d, 0x7d, 0xfc, 0xc5, 0xff, 0x79, 0xd9, 0xcd, 0x7f, 0x94, 0xfb, 0xb5, 0x75,
	0xea, 0xa8, 0x6d, 0xef, 0xfe, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x6e, 0x18, 0x40, 0x16, 0xc9, 0x08,
	0x00, 0x00,
}
