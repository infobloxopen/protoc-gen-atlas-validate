// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: example/examplepb/example.proto

package examplepb // import "github.com/askurydzin/protoc-gen-atlas-validate/example/examplepb"

import fmt "fmt"
import http "net/http"
import json "encoding/json"
import ioutil "io/ioutil"
import bytes "bytes"
import context "golang.org/x/net/context"
import metadata "google.golang.org/grpc/metadata"
import runtime "github.com/grpc-ecosystem/grpc-gateway/runtime"
import validate_runtime "github.com/askurydzin/protoc-gen-atlas-validate/runtime"
import proto "github.com/gogo/protobuf/proto"
import math "math"
import _ "github.com/askurydzin/protoc-gen-atlas-validate/options"
import _ "google.golang.org/genproto/googleapis/api/annotations"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// ValidateJSON validates JSON values for Profile
func DefaultProfileValidateJSON(v map[string]interface{}, path string) error {
	var err error

	for k, _ := range v {
		switch k {
		case "id":
		case "name":
		case "notes":
		default:
			return fmt.Errorf("Unknown field %q", validate_runtime.JoinPath(path, k))
		}
	}
	return err
}

// ValidateJSON validates JSON values for Address
func DefaultAddressValidateJSON(v map[string]interface{}, path string) error {
	var err error

	for k, _ := range v {
		switch k {
		case "country":
		case "state":
		case "city":
		case "zip":
		default:
			return fmt.Errorf("Unknown field %q", validate_runtime.JoinPath(path, k))
		}
	}
	return err
}

// ValidateJSON validates JSON values for Group
func DefaultGroupValidateJSON(v map[string]interface{}, path string) error {
	var err error

	for k, _ := range v {
		switch k {
		case "name":
		case "notes":
		default:
			return fmt.Errorf("Unknown field %q", validate_runtime.JoinPath(path, k))
		}
	}
	return err
}

// ValidateJSON validates JSON values for User
func DefaultUserValidateJSON(v map[string]interface{}, path string) error {
	var err error

	for k, _ := range v {
		switch k {
		case "id":
		case "name":
		case "profile":
			if v[k] == nil {
				continue
			}
			vv := v[k]
			if v, ok := vv.(map[string]interface{}); ok {
				if validator, ok := interface{}(&Profile{}).(interface {
					ValidateJSON(map[string]interface{}, string) error
				}); ok {
					if err = validator.ValidateJSON(v, validate_runtime.JoinPath(path, k)); err != nil {
						return err
					}
				} else {
					if err = DefaultProfileValidateJSON(v, validate_runtime.JoinPath(path, k)); err != nil {
						return err
					}
				}
			} else {
				return fmt.Errorf("Invalid value for %q: expected object", validate_runtime.JoinPath(path, k))
			}
		case "address":
			if v[k] == nil {
				continue
			}
			vv := v[k]
			if v, ok := vv.(map[string]interface{}); ok {
				if validator, ok := interface{}(&Address{}).(interface {
					ValidateJSON(map[string]interface{}, string) error
				}); ok {
					if err = validator.ValidateJSON(v, validate_runtime.JoinPath(path, k)); err != nil {
						return err
					}
				} else {
					if err = DefaultAddressValidateJSON(v, validate_runtime.JoinPath(path, k)); err != nil {
						return err
					}
				}
			} else {
				return fmt.Errorf("Invalid value for %q: expected object", validate_runtime.JoinPath(path, k))
			}
		case "groups":
			if v[k] == nil {
				continue
			}
			vv := v[k]
			if vArr, ok := vv.([]interface{}); ok {
				if validator, ok := interface{}(&Group{}).(interface {
					ValidateJSON(map[string]interface{}, string) error
				}); ok {
					for i, vVal := range vArr {
						if vVal == nil {
							continue
						}
						aPath := fmt.Sprintf("%s.[%d]", validate_runtime.JoinPath(path, k), i)
						if v, ok := vVal.(map[string]interface{}); ok {
							if err = validator.ValidateJSON(v, aPath); err != nil {
								return err
							}
						} else {
							return fmt.Errorf("Invalid value for %q: expected object", aPath)
						}
					}
				} else {
					for i, vVal := range vArr {
						if vVal == nil {
							continue
						}
						aPath := fmt.Sprintf("%s.[%d]", validate_runtime.JoinPath(path, k), i)
						if v, ok := vVal.(map[string]interface{}); ok {
							if err = DefaultGroupValidateJSON(v, aPath); err != nil {
								return err
							}
						} else {
							return fmt.Errorf("Invalid value for %q: expected object", aPath)
						}
					}
				}
			} else {
				return fmt.Errorf("Invalid value for %q: expected array", validate_runtime.JoinPath(path, k))
			}
		default:
			return fmt.Errorf("Unknown field %q", validate_runtime.JoinPath(path, k))
		}
	}
	return err
}

// ValidateJSON validates JSON values for CreateUserRequest
func DefaultCreateUserRequestValidateJSON(v map[string]interface{}, path string) error {
	var err error

	if validator, ok := interface{}(&(User{})).(interface {
		ValidateJSON(map[string]interface{}, string) error
	}); ok {
		if err = validator.ValidateJSON(v, path); err != nil {
			return err
		}
	} else {
		if err = DefaultUserValidateJSON(v, path); err != nil {
			return err
		}
	}
	return err
}

// ValidateJSON validates JSON values for UpdateUserRequest
func DefaultUpdateUserRequestValidateJSON(v map[string]interface{}, path string) error {
	var err error

	if validator, ok := interface{}(&(User{})).(interface {
		ValidateJSON(map[string]interface{}, string) error
	}); ok {
		if err = validator.ValidateJSON(v, path); err != nil {
			return err
		}
	} else {
		if err = DefaultUserValidateJSON(v, path); err != nil {
			return err
		}
	}
	return err
}

// ValidateJSON validates JSON values for UpdateProfileRequest
func DefaultUpdateProfileRequestValidateJSON(v map[string]interface{}, path string) error {
	var err error

	if validator, ok := interface{}(&(Profile{})).(interface {
		ValidateJSON(map[string]interface{}, string) error
	}); ok {
		if err = validator.ValidateJSON(v, path); err != nil {
			return err
		}
	} else {
		if err = DefaultProfileValidateJSON(v, path); err != nil {
			return err
		}
	}
	return err
}

var patterns = []struct {
	method    string
	pattern   runtime.Pattern
	validator func(map[string]interface{}, string) error
}{
	{
		method:    "POST",
		pattern:   pattern_Users_Create_0,
		validator: DefaultCreateUserRequestValidateJSON,
	},
	{
		method:    "PUT",
		pattern:   pattern_Users_Update_0,
		validator: DefaultUpdateUserRequestValidateJSON,
	},
	{
		method:    "PATCH",
		pattern:   pattern_Users_Update_0,
		validator: DefaultUpdateUserRequestValidateJSON,
	},
	{
		method:    "POST",
		pattern:   pattern_Profiles_Create_0,
		validator: DefaultProfileValidateJSON,
	},
	// {
	// method: "PUT",
	// pattern: pattern_Profiles_Update_0,
	// validator: DefaultUpdateProfileRequestValidateJSON,
	// },
}

// ValidationAnnotator function validates JSON.
func ValidationAnnotator(ctx context.Context, r *http.Request) metadata.MD {
	var jv map[string]interface{}

	md := make(metadata.MD)
	if len(patterns) == 0 {
		return md
	}
	b, err := ioutil.ReadAll(r.Body)
	r.Body = ioutil.NopCloser(bytes.NewReader(b))
	if err != nil {
		md.Set("Atlas-Validation-Error", fmt.Sprintf("Unable to read JSON request"))
		return md
	} else if err := json.Unmarshal(b, &jv); err != nil {
		if len(b) != 0 {
			md.Set("Atlas-Validation-Error", fmt.Sprintf("Unable to parse JSON request"))
			return md
		}
	}

	for _, v := range patterns {
		if r.Method == v.method && validate_runtime.PatternMatch(v.pattern, r.URL.Path) {
			if err := v.validator(jv, ""); err != nil {
				md.Set("Atlas-Validation-Error", err.Error())
			}
			break
		}
	}
	return md
}
